from PIL import Image
import torchvision.transforms as transforms
import torch

# Load an image using PIL
image_path = 'path_to_your_image.jpg'  # Replace with your image path
image = Image.open(image_path)

# Define the transformation: Convert to tensor and normalize
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])  # Assuming 3 channels (RGB)
])

# Apply the transformation
image_tensor = transform(image)

print(image_tensor)






import torchvision.transforms.functional as F

# Custom transformation to rotate an image by 45 degrees
class RotateTransform:
    def _call_(self, x):
        return F.rotate(x, 45)

# Define the transformation: Rotate and resize
transform = transforms.Compose([
    RotateTransform(),
    transforms.Resize((128, 128)),
    transforms.ToTensor()
])

# Apply the transformation
rotated_resized_image_tensor = transform(image)

print(rotated_resized_image_tensor)






# Define the transformations: Random horizontal flip, random crop, and grayscale
transform = transforms.Compose([
    transforms.RandomHorizontalFlip(),
    transforms.RandomCrop(100),
    transforms.Grayscale(),
    transforms.ToTensor()
])

# Apply the transformation
transformed_image_tensor = transform(image)

print(transformed_image_tensor)